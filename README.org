* cred

[[file:img/comma.png]]

/Canvas Rendered EDitor/

* Why
There are [[https://github.com/showcases/text-editors][text editors]] already, [[http://thomaswilburn.net/caret/][even for Chrome OS]].  Why another?

- learn from other implementations (Spacemacs, Ace, Sublime Text, etc.)
- unique rendering mode
- reinvent ALL THE WHEELS!
- but really: Spacemacs for the web
  
* Features
...in various amounts of implementation

** render to HTML5 canvas
This [[http://stackoverflow.com/a/12437275/2037637][may be crazy]].  But it's part of the acronym, so it stays.

** game loop: separate concerns, smooth UI
- =while(true){input(),logic(),render()}=
- service =inputs= immediately
- update =logic= at fixed time steps for smoother animations
- =render= webGL possible; 2d still offers finer grained control and faster redraws than DOM

** layered, modal, keyboard-driven input
- =normal=, =insert=, =visual= modes like Vim
- popup mini-modes like Spacemacs

* Contributing
Fork/pull if you want to contribute.

** License
License is [[http://unlicense.org/][the unlicense]], which is about as permissive as I've found while still looking official.

** Style
Google Chrome 49 is the target browser, which eliminates the need for verbose polyfills.  The Chrome JavaScript runtime also supports some features that I use a lot, particularly this "lightweight" function syntax:

#+BEGIN_SRC js
// instead of this:
var foo=function(param){return explicit_return_value;};

// use this when possible:
var foo=(param)=>{implicit_return_value;};
#+END_SRC

As well as this alternative syntax for defining a function within an object literal (in this example, also used with an arrow function returning an object literal):

#+BEGIN_SRC js
var Thing=()=>({
    m_one(p){p+1;},
    m_two(q){q*q;}, // trailing comma is fine
});
var a=Thing();
a.m_one(2); // returns 3
a.m_two(9); // returns 81
#+END_SRC

Some inspiration for this style comes from this [[http://nsl.com/papers/style.pdf][K style guide]].

Other conventions:

- ALL_CAPS_CONSTANTS
- ProperCamelCaseClasses
- rarely_used_name_snake_case
- cu // commonly used name style

Having said all that, I'll also make the claim that I'm not zealous about style and am open to change.

* Links
- [[http://www.catch22.net/tuts/piece-chains][piece tables in windows text editors]]
- [[http://www.codeproject.com/Articles/20910/Generic-Gap-Buffer][gap buffer in C#]]
- [[https://www.common-lisp.net/project/flexichain/download/StrandhVilleneuveMoore.pdf][circular gap buffer 'flexichain']]
- [[https://github.com/jaz303/gapbuffer/blob/master/index.js][gap buffer in Node.js]]
- [[https://news.ycombinator.com/item?id=11244103][yc on this subject]]
- [[http://www.isaacsukin.com/news/2015/01/detailed-explanation-javascript-game-loops-and-timing][robust game loops]]
