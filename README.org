* cred ([[http://alexshroyer.com/cred][demo]])
[[file:img/with-cursors.png]]
/Canvas Rendered EDitor/

* Why
There are [[https://github.com/showcases/text-editors][text editors]] already, [[http://thomaswilburn.net/caret/][even for Chrome OS]].  Why another?  And why JavaScript for #@^%'s sake?

- experiment with immediate-mode rendering in a text editor *[update: no longer using Canvas for text]* 
- something Spacemacs-like (but "native" for Chromebooks) doesn't exist yet
- writing single-browser ES6 is quite pleasant (but I'm used to embedded C++ so YMMV)

** Some TODOs
- ditch Canvas because its text is fuzzy on devices with lots of pixels
- full rewrite of normal-mode command parser
- =yip=, =d3x=, =caw= (operators besides the implicit "move")
- undo/redo
- File I/O
- visual mode
- text object spans (e.g. =daw= should delete an entire word touching the cursor, even if the cursor is in the middle of the word)
- syntax/semantic highlighting
- assorted WYSIWYG features: inline images, font style and sizes, drag-and-drop, etc.
  
* Contributing
Fork, pull request.

** License
MIT

** Style Conventions
Some inspiration comes from this [[http://nsl.com/papers/style.pdf][K style guide]]. Other conventions include:
- complete thoughts which are /short enough/ (about 100 chars) should go on one line
- =/* permanent documentation comment */=
- =// temporary, TODO, or debugging comment=
- ={= always wrap blocks in braces =}=
- always terminate statements with a semicolon =;=
- =const use=(fat_arrow_notation)=>{/* whenever possible */};=
- =const use(alternative_syntax){/* for functions declared inside of objects */};=
- avoid =var=
- prefer =const= over =let=
- =cu /* commonly used name with a comment explaining its purpose */=
- =self_documenting_name=
- =ClassName /* with documentation comments */=

* Links
** general
- [[https://github.com/creationix/tedit][tedit - IDE that directly edits Git repos (would love this as a backend)]]
- [[https://github.com/martanne/vis#operators][vis feature set]]
- [[http://vimsheet.com/][vim command cheatsheet]]
- [[http://www.isaacsukin.com/news/2015/01/detailed-explanation-javascript-game-loops-and-timing][robust game loops]]
- [[http://cryto.net/~joepie91/blog/2015/05/04/functional-programming-in-javascript-map-filter-reduce/][functional javascript]]

** specific
- [[https://takac.github.io/][vim grammar]]
- [[http://www.catch22.net/tuts/piece-chains][piece tables in windows text editors]]
- [[http://www.codeproject.com/Articles/20910/Generic-Gap-Buffer][gap buffer in C#]]
- [[https://www.common-lisp.net/project/flexichain/download/StrandhVilleneuveMoore.pdf][circular gap buffer 'flexichain']]
- [[https://github.com/jaz303/gapbuffer/blob/master/index.js][gap buffer in Node.js]]
- [[https://news.ycombinator.com/item?id=11244103][yc on this subject]]
  
  
