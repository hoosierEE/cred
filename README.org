* cred ([[http://alexshroyer.com/cred][demo]])
[[file:img/with-cursors.png]]
/Canvas Rendered EDitor/

* Why
There are [[https://github.com/showcases/text-editors][text editors]] already, [[http://thomaswilburn.net/caret/][even for Chrome OS]].  Why another?

The primary goal of Cred is to bring some of Spacemacs' UX to a single-page web application. This means it can run on Chrome OS without enabling developer mode, and can be "deployed" via static hosting, e.g. Amazon S3.

The major design choice (not yet finalized) is between more webpage-like filesystem access (i.e. very limited) or more native-app-like, unlimited local storage space (as a Chrome App).
  
** Completed Features
- scrolling via keyboard or mouse
- several normal-mode motions (forward-paragraph, backward-word, etc.)
- tokenize multi-part commands (e.g. =12ya)=)
- draw text without perceptible lag
  
** Some TODOs
- =yip=, =d3x=, =caw= (operators besides the implicit "move")
- undo/redo
- File I/O
- visual mode
- text object spans (e.g. =daw= should delete an entire word touching the cursor, even if the cursor is in the middle of the word)
- syntax/semantic highlighting
- assorted WYSIWYG features: inline images, font style and sizes, drag-and-drop, etc.
  
* Contributing
Fork/pull if you want to contribute.

** License
MIT

** Code Style
Some inspiration comes from this [[http://nsl.com/papers/style.pdf][K style guide]]. Other (not very strict) conventions include:
- always wrap blocks in braces ={}=
- always terminate statements with a semicolon =;=
- prefer (in order) =const=, then =let=, then =var=
- "complete thoughts" which are /short enough/ (about 100 chars) should go on one line
- cu // commonly used name with a comment explaining its purpose
- rarely_used_name
- ModuleOrClassName

* Links
** general
- [[https://github.com/creationix/tedit][tedit - IDE that directly edits Git repos (really impressive concepts here!)]]
- [[https://github.com/martanne/vis#operators][vis feature set]]
- [[http://vimsheet.com/][vim command cheatsheet]]
- [[http://www.isaacsukin.com/news/2015/01/detailed-explanation-javascript-game-loops-and-timing][robust game loops]]
- [[http://cryto.net/~joepie91/blog/2015/05/04/functional-programming-in-javascript-map-filter-reduce/][functional javascript]]

** specific
- [[https://takac.github.io/][vim grammar]]
- [[http://www.catch22.net/tuts/piece-chains][piece tables in windows text editors]]
- [[http://www.codeproject.com/Articles/20910/Generic-Gap-Buffer][gap buffer in C#]]
- [[https://www.common-lisp.net/project/flexichain/download/StrandhVilleneuveMoore.pdf][circular gap buffer 'flexichain']]
- [[https://github.com/jaz303/gapbuffer/blob/master/index.js][gap buffer in Node.js]]
- [[https://news.ycombinator.com/item?id=11244103][yc on this subject]]
  
  
